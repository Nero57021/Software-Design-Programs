Using test first development, write the program described below.

To run the tests, run the build. For example, 
./gradlew for Java or paver for Python
That should run the test, create a coverage report, and also create a PMD report for Java or Radon report for Python.

To execute the program, run the build with the run task. For example,
./gradlew run for Java or paver run for Python

Write a program that will ask the user to enter a number. The program will then print if that given number is perfect, abundant, or deficient.
https://en.wikipedia.org/wiki/Perfect_number

Assume that the user enters a number greater than or equal to 1. Do not check for the possibility that 
the user enters anything other than a number greater than or equal to 1.

The interaction with the user should be like this, on the console. Do not create a GUI:
Please enter a number greater than 0: <user enters a number>
The number <user entered number> is perfect.
or
The number <user entered number> is abundant.
or
The number <user entered number> is deficient.

Partial scores will be given for using functional style and avoiding mutating any variables (assignment is OK, but reassignment is not). When using functional style avoid using recursion.

Write the program so that if we decide to change the way the user will interact with the program then most of the code will not have to change.

Scores will be allotted for each part below:
Build setup properly [10]:

Program works as expected [10]: -3

> ./gradlew run

> Task :run
Enter a number: 6
<<=========----> 75% EXECUTING [3s]


BUILD SUCCESSFUL in 4s
2 actionable tasks: 1 executed, 1 up-to-date

> ./gradlew run

> Task :run
Enter a number: 
<<=========----> 75% EXECUTING [3s]
Given Number is Deficient

BUILD SUCCESSFUL in 4s
2 actionable tasks: 1 executed, 1 up-to-date


> Task :run
Enter a number: 
<=<=========----> 75% EXECUTING [3s]
Given Number is Abundant

BUILD SUCCESSFUL in 4s
2 actionable tasks: 1 executed, 1 up-to-date
>

Program deals with user input within stated expectations properly [10]:
Tests pass [10]:
Test Quality [10]:
Code coverage [10]:
Design quality [20]: -10
Duplication of code between functions to compute the total of factorial.

Code quality [10]: -3
Space around operators.
Inconsistent function names.
Commented out stuff.

Honoring immutability, using functional style [10]:

Total [10]: 84
