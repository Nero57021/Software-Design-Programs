x canary test
x get_list_of_times_for_locations for an empty list of locations returns an empty list.
x get_list_of_times_for_locations for a list with one location returns time for that location.
x get_list_of_times_for_locations for a list with two location returns time for those location.
x get_list_of_times_for_locations for a list with three location and one duplicate returns time for only two location.

x get_list_of_times_for_locations for a list with two locations returns time for two locations.

x get_list_of_times_for_locations for a list with three locations returns time for three locations.

x get_list_of_times_for_locations for a list with three location returns time for two locations and an error message when the request for the second location fails with an "invalid location" exception.

x get_list_of_times_for_locations for a list with three location returns time for two locations and an error message when the request for the third location fails with a "network error" exception.

x Functions to talk to the real service
x get_raw_response takes URL and returns response with passes, latitude, and longitude
x parse_json response for a sample 1 returns proper time as string
x parse_json returns for a sample 2 returns proper time as string
x get_flyover_time takes a location and calls get_raw_response and passes the response to parse_json and returns response from parse_json

x get_flyover_time throws the exception thrown by get_raw_response
x get_flyover_time throws the exception thrown by parse_json

-...test to design the code for getting the astronaut names...
x get_raw_response returns the current astronauts information
x parseJSON returns list of 3 astronauts name
x parseJSON returns list of 4 astronauts name
x parseJSON returns list of 1 astronauts name
x getAstronautNames returns a list 3 of names
...


Let's design a ui (not a GUI) program that will read a list of lat and lon from a file and display the relevant information. Let's create a run task to run the UI easily.
