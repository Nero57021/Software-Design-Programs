package locator;

import locator.preview.Location;
import locator.service.IssInformationService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class IssInformationTest { //Feedback: this test should help us to design IssInformation, from the name we see that.

//Feedback: VALID_JSON_RESPONSE - this does not seem like anything related to IssInformation. Does this belong here?
  private final String VALID_JSON_RESPONSE = "{\"message\":\"success\",\"request\":{\"altitude\":100,\"datetime\":1602201251,\"latitude\":29.72167,\"longitude\":-95.343631,\"passes\":1},\"response\":[{\"duration\":645,\"risetime\":1602203714}]}";
  private final String SAMPLE_URL = "http://api.open-notify.org/iss-pass.json?lat=29.721670&lon=-95.343631&n=1";
  public IssInformation issInformation;
  IssInformationService issInformationServiceMock;

  @BeforeEach
  void init() {
    issInformation = new IssInformation();
    issInformationServiceMock = mock(IssInformationService.class);
    issInformation.setIssInformationService(issInformationServiceMock);
  }

  @Test
  void canary() {
    assert (true);
  }

  @Test
  void givenEmptyListOfLocationReturnEmptyList() {
    assertEquals(Map.of(), issInformation.getFlyOverTimeForLocations(List.of()));
  }

  @Test
  void givenListOfLocationsReturnAListOfTime() {
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(29.7604, -95.3698))).thenReturn("11:58PM");

    assertEquals(Map.of(new Location(29.7604, -95.3698), "11:58PM"),
      issInformation.getFlyOverTimeForLocations(List.of(new Location(29.7604, -95.3698))));

  }


  @Test
  void givenTwoLocationReturnTimeForBothLocation() {
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(29.7604, -95.3698))).thenReturn("11:58PM");
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(30.2672, -97.7431))).thenReturn("10:58AM");

    assertEquals(Map.of(
      new Location(29.7604, -95.3698), "11:58PM",
      new Location(30.2672, -97.7431), "10:58AM"),
      issInformation.getFlyOverTimeForLocations(List.of(
        new Location(29.7604, -95.3698),
        new Location(30.2672, -97.7431)
      )));
  }

  @Test
  void givenThreeLocationReturnTimeForThreeLocation() {
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(29.7604, -95.3698))).thenReturn("11:58PM");
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(30.2672, -97.7431))).thenReturn("10:58AM");
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(35.2220, -101.831))).thenReturn("8:30AM");

    assertEquals(Map.of(
      new Location(29.7604, -95.3698), "11:58PM",
      new Location(30.2672, -97.7431), "10:58AM",
      new Location(35.2220, -101.831), "8:30AM"),
      issInformation.getFlyOverTimeForLocations(List.of(
        new Location(29.7604, -95.3698),
        new Location(30.2672, -97.7431),
        new Location(35.2220, -101.831)
      )));
  }

  @Test
  void givenThreeLocationReturnsTimeForTwoLocationAndErrorForLocation() {
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(29.7604, -95.3698))).thenReturn("11:58PM");
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(100.12, 190.2323))).thenThrow(new RuntimeException("invalid location"));
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(35.2220, -101.831))).thenReturn("8:30AM");

    assertEquals(Map.of(
      new Location(29.7604, -95.3698), "11:58PM",
      new Location(100.12, 190.2323), "invalid location",
      new Location(35.2220, -101.831), "8:30AM"
      ),
      issInformation.getFlyOverTimeForLocations(List.of(
        new Location(29.7604, -95.3698),
        new Location(100.12, 190.2323),
        new Location(35.2220, -101.831)
      )));
  }

  @Test
  void givenListOfLocationReturnsTimeForFirstTwoLocationThirdLocationFails() {
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(29.7604, -95.3698))).thenReturn("11:58PM");
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(30.2672, -97.7431))).thenReturn("2:31PM");
    when(issInformationServiceMock.getFlyOverTimeForLocation(new Location(35.2220, -101.831))).thenThrow(new RuntimeException("network error"));

    assertEquals(Map.of(
      new Location(29.7604, -95.3698), "11:58PM",
      new Location(30.2672, -97.7431), "2:31PM",
      new Location(35.2220, -101.831), "network error"),
      issInformation.getFlyOverTimeForLocations(List.of(
        new Location(29.7604, -95.3698),
        new Location(30.2672, -97.7431),
        new Location(35.2220, -101.831)
      )));
  }
  
//Feedback: up to here, this test IssInformationTest focused on the getRawResponseTakesURLReturnsPassesLatAndLong method of IssInformation. That is good.

//Now we see that this method is focusing on getRawResponse which is not part of IssInformation.
//The following violate the Single Responsibility Principle (SRP). Tests for the code that talks
//to the webservice should be in a separate test class.  

  @Test
  void getRawResponseTakesURLReturnsPassesLatAndLong() {
    doReturn(VALID_JSON_RESPONSE).when(issInformationServiceMock).getRawResponse(SAMPLE_URL);

    assertEquals(VALID_JSON_RESPONSE, issInformationServiceMock.getRawResponse(SAMPLE_URL));
    
    //Feedback: let's watch the above lines very carefully.
    //doReturn ... that line created a stub/mock for getRawResponse.
    //assertEquals... line is testing getRawResponse.
    
    //We just tested the stub/mock. We should never test a stub or a mock.
    
    // test ----> function being tested ----> dependency stubbed or mocked
    //above good idea
    
    //test ----> stub or mock
    //above has no purpose
  }

  @Test
  void parseJSONTakesRawJSONReturnsOneTime() {

    doReturn("1602203714").when(issInformationServiceMock).parseJSON(VALID_JSON_RESPONSE);

    assertEquals("1602203714", issInformationServiceMock.parseJSON(VALID_JSON_RESPONSE));
  }

  @Test
  void parseJSONTakesRawJSONReturnsTwoTime() {
    final String VALID_RESPONSE = "{\"message\":\"success\",\"request\":{\"altitude\":100,\"datetime\":1602207281,\"latitude\":30.2672,\"longitude\":-97.7431,\"passes\":1},\"response\":[{\"duration\":547,\"risetime\":1602209521}]}";

    doReturn("1602203714").when(issInformationServiceMock).parseJSON(VALID_JSON_RESPONSE);
    doReturn("1602209521").when(issInformationServiceMock).parseJSON(VALID_RESPONSE);

    assertAll(
      () -> assertEquals("1602203714", issInformationServiceMock.parseJSON(VALID_JSON_RESPONSE)),
      () -> assertEquals("1602209521", issInformationServiceMock.parseJSON(VALID_RESPONSE))
    );
  }

  @Test
  void getFlyOverTimeTakesLocationReturnResponseFromParseJSON() {

    doReturn("1602203714").when(issInformationServiceMock).getFlyOverTime(new Location(29.7216704, -95.343631));

    assertEquals("1602203714", issInformationServiceMock.getFlyOverTime(new Location(29.7216704, -95.343631)));
  }
}