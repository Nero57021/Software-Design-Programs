package factorial;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigInteger;

import static org.junit.jupiter.api.Assertions.*;

public class FactorialTest {

  private Factorial factorial;

  @BeforeEach
  void setUp() {
    factorial = new Factorial();
  }

  @Test
  void canary() {
    assert (true);
  }

  @Test
  void factorialImperativeReturnsTheFactorialOfGivenNumber() {

    assertAll(
      () -> assertEquals(new BigInteger("1"), factorial.factorialImperative(0)),
      () -> assertEquals(new BigInteger("1"), factorial.factorialImperative(1)),
      () -> assertEquals(new BigInteger("2"), factorial.factorialImperative(2)),
      () -> assertEquals(new BigInteger("6"), factorial.factorialImperative(3)),
      () -> assertEquals(new BigInteger("24"), factorial.factorialImperative(4)),
      () -> assertEquals(new BigInteger("120"), factorial.factorialImperative(5)),
      () -> assertEquals(new BigInteger("3628800"), factorial.factorialImperative(10)),
      () -> assertEquals(new BigInteger("30414093201713378043612608166064768844377641568960512000000000000"), factorial.factorialImperative(50))
    );
  }

  @Test
  void factorialImperativeGivenNegativeNumberThrowsException() {
    assertThrows(RuntimeException.class, () -> factorial.factorialImperative(-1));
  }

  @Test
  void factorialRecursiveReturnsTheFactorialOfGivenNumber() {

    assertAll(
      () -> assertEquals(new BigInteger("1"), factorial.factorialRecursive(0)),
      () -> assertEquals(new BigInteger("1"), factorial.factorialRecursive(1)),
      () -> assertEquals(new BigInteger("2"), factorial.factorialRecursive(2)),
      () -> assertEquals(new BigInteger("6"), factorial.factorialRecursive(3)),
      () -> assertEquals(new BigInteger("24"), factorial.factorialRecursive(4)),
      () -> assertEquals(new BigInteger("120"), factorial.factorialRecursive(5)),
      () -> assertEquals(new BigInteger("3628800"), factorial.factorialRecursive(10)),
      () -> assertEquals(new BigInteger("30414093201713378043612608166064768844377641568960512000000000000"), factorial.factorialRecursive(50))
    );
  }

  @Test
  void factorialRecursiveGivenNegativeNumberThrowsException() {
    assertThrows(RuntimeException.class, () -> factorial.factorialRecursive(-1));
  }
}