package locator;

import locator.preview.Location;
import locator.service.OpenNotifyLocationWebService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class OpenNotifyLocationWebServiceTest {

  public OpenNotifyLocationWebService webService;

  @BeforeEach
  void init() {
    webService = new OpenNotifyLocationWebService();
  }

  @Test
  void getRawResponseTakesURLReturnsPassesLatAndLong() {
    assertAll(
      () -> assertTrue(webService.getRawResponse(29.72167, -95.343631).contains("passes")),
      () -> assertTrue(webService.getRawResponse(29.72167, -95.343631).contains("latitude")),
      () -> assertTrue(webService.getRawResponse(29.72167, -95.343631).contains("longitude"))
    );
  }

  @Test
  void parseJSONTakesRawJSONReturnsTime() {

    final String VALID_JSON_RESPONSE = """
      {
        "message": "success",\s
        "request": {
          "altitude": 100,\s
          "datetime": 1602201251,\s
          "latitude": 29.72167,\s
          "longitude": -95.343631,\s
          "passes": 1
        },\s
        "response": [
          {
            "duration": 645,\s
            "risetime": %d
          }
        ]
      }""";

    assertAll(
      () -> assertEquals("1602203714", webService.parseJSON(String.format(VALID_JSON_RESPONSE, 1602203714))),
      () -> assertEquals("1602209521", webService.parseJSON(String.format(VALID_JSON_RESPONSE, 1602209521)))
    );
  }

  @Test
  void getFlyOverTimeTakesLocationReturnResponseFromParseJSON() throws Exception {

    webService = spy(OpenNotifyLocationWebService.class);
    doReturn("blah").when(webService).getRawResponse(29.72167, -95.343631);
    doReturn("1602209521").when(webService).parseJSON("blah");

    assertEquals("02:12AM", webService.getFlyOverTimeForLocation(new Location(29.72167, -95.343631)));
  }

  @Test
  void getFlyOverTimeThrowsExceptionFromGetRawResponse() throws Exception {
    webService = spy(OpenNotifyLocationWebService.class);

    doThrow(new RuntimeException("network error")).when(webService).getRawResponse(100.12, 190.2323);
    assertEquals("network error", webService.getFlyOverTimeForLocation(new Location(100.12, 190.2323)));
  }

  @Test
  void getFlyOverTimeThrowsExceptionFromParseJSON() throws Exception {

    final String INVALID_JSON = """
        {
        "message": "failure",\s
        "reason": "Latitude must be number between -90.0 and 90.0"\s
      }""";

    webService = spy(OpenNotifyLocationWebService.class);

    doReturn(INVALID_JSON).when(webService).getRawResponse(100.12, 190.2323);

    assertEquals("invalid location", webService.getFlyOverTimeForLocation(new Location(100.12, 190.2323)));
  }

}
